#Я не стал прописывать тест кейсы, решил что чек-листов будет достаточно. В случае необходимости их можно бдует
#декомпозировать.
#Зачастую не хватало требований и спецификаций для полного покрытия, часть кейсов я пометил как !Уточнить требования! но
#не устал уточнять поскольку Инна предложила сформировать кейсы на основе моего опыта. В случае необходимости кейсы
#можно дополнить.

news_list_positive:
    precondition:
        1. Бэк возращает не пустой список новостей
        2. Бэк возвращает пустой список новостей
        test_data:
            1. Размеры изображения, заголовка и текста описания = {sizes}
            2. Регулярка по сокращениям = {regexp}
    steps:
        1. Проверить загрузку новостей
    expected_result:
        1. Новости успешны загружены и соответсвуют значениям из респонса
        2. Каждая карточка соотвествует размерам {sizes}
        3. UI элементы доступны и не накладываются друг на друга на разных размерах экранов
        4. Длинный текст сокращается по правилам {regexp}
        5. При отсуствии новостей отображается бланк экран

news_list_negative:
    precondition:
        test_data:
            1. Тексты сообщений = {error_messages}
    steps:
        1. Проверить некорректную схему json(отсутсвие обязательных и необязательных полей, новые поля, типы полей)
        2. Проверить не 200 коды
        3. Проверить пустые поля в респонсе
    expected_result:
        !Уточнить требования!
        Поведение при некорректных значениях могут быть:
            1. Пропуск новостей с недостаточными данными
            2. Заполнение новости значениями по умолчанию
            3. Отображение сообщения об ошибке
            4. Отображение сообщения об ошибке при не 200 кодах

pagination:
    precondition:
        !Уточнить требования!
        Тип пагинации (Пролистование страниц или бесконечная страница)
        test_data:
            Число новостей на одной странице = {page_size}
    steps:
        1. Проверить подгрузку новых элементов
        2. Проверить смещение элементов (со временем элементы могут совпадать с ранее полученными)
    expected_result:
        Новости подгружаются корректно, нет дублирующих значений

filter_positive:
    precondition:
        !Уточнить требования!
        Фильтрация внутри текущего списка? Фильтрация внутри полного списка? Поиск?
    steps:
        1. Проверить фильтрацию с корректными значениями (полное вхождение, неполное вхождение, разный регистр)
        2. Проверить фильтрацию с совпадающими элементами списка
        3. Проверить филтрацию со значенями вне списка
    expected_result:
        Найдены все значения попадающие под условия фильтра

filter_negative:
    precondition:
        !Уточнить требования!
        Фильтрация внутри текущего списка? Фильтрация внутри полного списка? Поиск?
    steps:
        1. Проверить фильтрацию с не корректными значениями (пустое значение, недопустимые символы, перенос каретки)
        2. Проверить возможность инькции (url, sql)
        3. news_list_negative
    expected_result:
        !Уточнить требования!
        Поведение при некорректных значениях могут быть:
            1. Отсутсвие результатов
            2. Отображение сообщения об ошибке

caching:
    precondition:

    steps:
        1. Проверить кэширование
        2. Проверить кэширование при фильтрации
    expected_result:
        Список новостей успешно закэширован при последнем успешном подключении

notification:
    precondition:
        !Уточнить требования!
    steps:
        1. Проверить кликабельность и UI отображение при выборе новости
        2. Проверить возможность выбора нескольких новостей
        3. Проверить отключение нотификации
        4. Проверить кэширование нотификации
        5. Проверить закрытие нотификации
        6. Проверить кликабельность нотификации
    expected_result:
        В нотификации отображается последняя выбранная новость
        Нотификация успешна закрыта

exploring:
    goal:
        1. Проверить функционал
        2. Проверить функционал в рамках ежедневного использования

ux:
    goal:
        1. Проверить удобство использования
        2. Проверить доступность приложения и отдельных элементов